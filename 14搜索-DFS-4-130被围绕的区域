给你一个 m x n 的矩阵 board ，由若干字符 'X' 和 'O' ，找到所有被 'X' 围绕的区域，并将这些区域里所有的 'O' 用 'X' 填充。
 
示例 1：
输入：board = [["X","X","X","X"],["X","O","O","X"],["X","X","O","X"],["X","O","X","X"]]
输出：[["X","X","X","X"],["X","X","X","X"],["X","X","X","X"],["X","O","X","X"]]
解释：被围绕的区间不会存在于边界上，换句话说，任何边界上的 'O' 都不会被填充为 'X'。 任何不在边界上，或不与边界上的 'O' 相连的 'O' 最终都会被填充为 'X'。如果两个元素在水平或垂直方向相邻，则称它们是“相连”的。

示例 2：
输入：board = [["X"]]
输出：[["X"]]
 
提示：
m == board.length
n == board[i].length
1 <= m, n <= 200
board[i][j] 为 'X' 或 'O'

解题关键：
根据题目要求：任何边界上的 'O' 都不会被填充为 'X'。 任何不在边界上，或不与边界上的 'O' 相连的 'O' 最终都会被填充为 'X'。
所以关键在于从边界入手！将边界上的'O'与边界上'O'相连的部分进入dfs递归，将其替换为一个其他符号'T',表示这部分不需要替换为'X'！再将剩余所有的'O'替换为'X','T'替换为'O',非常巧妙的思想！！

class Solution {
    private int[][] directions={{0,1},{0,-1},{-1,0},{1,0}};
    private int m,n;
    public void solve(char[][] board) {
        if(board==null || board.length==0) return;
        m=board.length;
        n=board[0].length;
        for(int i=0;i<n;i++){
            if(board[0][i]=='O') dfs(0,i,board);
            if(board[m-1][i]=='O') dfs(m-1,i,board);
        }
        for(int i=0;i<m;i++){
            if(board[i][0]=='O') dfs(i,0,board);
            if(board[i][n-1]=='O') dfs(i,n-1,board);
        }
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(board[i][j]=='X') continue;
                else if(board[i][j]=='O') board[i][j]='X';
                else if(board[i][j]=='T') board[i][j]='O';
            }
        }

    }

    public void dfs(int row,int column,char[][] board){
        if(row<0 || row>=m || column<0 || column>=n || board[row][column]!='O') return;    //不要忘记最后一个board[row][column]!='O'的限定条件！因为要进入递归！！
        board[row][column]='T';
        for(int[] direction:directions){
            dfs(row+direction[0], column+direction[1], board);
        }

    }
}
