数组arr是[0, 1, ..., arr.length - 1]的一种排列，我们将这个数组分割成几个“块”，并将这些块分别进行排序。之后再连接起来，使得连接的结果和按升序排序后的原数组相同。

我们最多能将数组分成多少块？

示例 1:
输入: arr = [4,3,2,1,0]
输出: 1
解释:
将数组分成2块或者更多块，都无法得到所需的结果。
例如，分成 [4, 3], [2, 1, 0] 的结果是 [3, 4, 0, 1, 2]，这不是有序的数组。

示例 2:
输入: arr = [1,0,2,3,4]
输出: 4
解释:
我们可以把它分成两块，例如 [1, 0], [2, 3, 4]。
然而，分成 [1, 0], [2], [3], [4] 可以得到最多的块数。

注意:

arr 的长度在 [1, 10] 之间。
arr[i]是 [0, 1, ..., arr.length - 1]的一种排列。

解题关键：明确题目规律：对每一个数组索引index  若index之前的所有元素均小于等于索引数值index  则分块数++  

class Solution {
    public int maxChunksToSorted(int[] arr) {
        if(arr==null) return 0;
        int maxCount=0;
        int currMax=arr[0];
        for(int i=0;i<arr.length;i++){        //优化关键一：只需对每个索引处求得之前元素最大值 并与当前索引比较
            currMax=Math.max(currMax,arr[i]);
            if(currMax==i) maxCount++;       //优化关键二：比较 元素最大值和当前索引是否相等即可currMax==i   而不用currMax<=i
        }
        return maxCount;
    }

}
