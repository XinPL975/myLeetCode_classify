给定一个区间的集合，找到需要移除区间的最小数量，使剩余区间互不重叠。

注意:
可以认为区间的终点总是大于它的起点。
区间 [1,2] 和 [2,3] 的边界相互“接触”，但没有相互重叠。

示例 1:
输入: [ [1,2], [2,3], [3,4], [1,3] ]
输出: 1
解释: 移除 [1,3] 后，剩下的区间没有重叠。

示例 2:
输入: [ [1,2], [1,2], [1,2] ]
输出: 2
解释: 你需要移除两个 [1,2] 来使剩下的区间没有重叠。

示例 3:
输入: [ [1,2], [2,3] ]
输出: 0
解释: 你不需要移除任何区间，因为它们已经是无重叠的了。

！！细节关键：
1.Comparator接口要写泛型！！注意重写的细节！泛型的内容！
2.maxCount初始化为1而不是为0  因为总能留下一个不被重叠的区间！！
3.要有endValue！因为若有重叠的区间 相当于把当前重叠区间删去  则比较的基准仍然是上一个endValue！！

class Solution {
    public int eraseOverlapIntervals(int[][] intervals) {
        Arrays.sort(intervals, new Comparator<int[]>(){
            @Override
            public int compare(int[] num1,int[] num2){
                return num1[1]<num2[1]?-1:(num1[1]==num2[1]?0:1);
            }
        });
        int maxCount=1;
        int endValue=intervals[0][1];
        for(int i=1;i<intervals.length;i++){
            if(endValue<=intervals[i][0]){
                maxCount++;
                endValue=intervals[i][1];
            }
        }
        return intervals.length-maxCount;

    }
}
