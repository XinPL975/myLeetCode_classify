给定一个二进制数组， 计算其中最大连续 1 的个数。

示例：

输入：[1,1,0,1,1,1]
输出：3
解释：开头的两位和最后的三位都是连续 1 ，所以最大连续 1 的个数是 3.
 
提示：

输入的数组只包含 0 和 1 。
输入数组的长度是正整数，且不超过 10,000。

法一：
class Solution {
    public int findMaxConsecutiveOnes(int[] nums) {
        int maxCount=0;
        int i=0;
        while(i<nums.length){
            int currCount=0;
            while(i<nums.length && nums[i]==1){
                currCount++;
                i++;
            }
            maxCount=Math.max(maxCount,currCount);
            i++;
        }
        return maxCount;
    }
}

法二：
class Solution {
    public int findMaxConsecutiveOnes(int[] nums) {
        int longest=0;
        int count=0;
        for(int num:nums){
            if(num==1){
                count++;
            }else{
                longest=Math.max(longest,count);
                count=0;
            }
        }
        longest=Math.max(longest,count);
        return longest;

    }
}
