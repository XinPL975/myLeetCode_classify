给定一个只包含数字的字符串，用以表示一个 IP 地址，返回所有可能从 s 获得的 有效 IP 地址 。你可以按任何顺序返回答案。
有效 IP 地址 正好由四个整数（每个整数位于 0 到 255 之间组成，且不能含有前导 0），整数之间用 '.' 分隔。
例如："0.1.2.201" 和 "192.168.1.1" 是 有效 IP 地址，但是 "0.011.255.245"、"192.168.1.312" 和 "192.168@1.1" 是 无效 IP 地址。

示例 1：
输入：s = "25525511135"
输出：["255.255.11.135","255.255.111.35"]

示例 2：
输入：s = "0000"
输出：["0.0.0.0"]

示例 3：
输入：s = "1111"
输出：["1.1.1.1"]

示例 4：
输入：s = "010010"
输出：["0.10.0.10","0.100.1.0"]

示例 5：
输入：s = "101023"
输出：["1.0.10.23","1.0.102.3","10.1.0.23","10.10.2.3","101.0.2.3"]
 
提示：
0 <= s.length <= 3000
s 仅由数字组成

class Solution {
    private List<String> res=new ArrayList<>();

    public List<String> restoreIpAddresses(String s) {
        if(s==null ||s.length()==0) return res;
        StringBuilder temp=new StringBuilder();
        backTracking(0,temp,s);
        return res;
    }

    public void backTracking(int num,StringBuilder temp,String s){
        if(num==4 || s.length()==0){          //关键细节！！！这里判断条件不能写s==null  s终止条件为s.length()==0！！！记住！！
            if(num==4 && s.length()==0){
                temp.deleteCharAt(temp.length()-1);
                res.add(temp.toString());
            }
            return;
        }
        int index=temp.length();
        for(int i=1;i<=3  && i<=s.length();i++){    //注意这里还有一个i<=s.length()的循环条件 防止空指针！！
            if(s.charAt(0)=='0' && i!=1) break;   //特殊情况 跳过
            int currNum=Integer.parseInt(s.substring(0, i));
            if(currNum<=255 ) {
                temp.append(currNum+".");
                backTracking(num+1, temp, s.substring(i));
                temp.delete(index, temp.length());
            }
        }
    }
}
