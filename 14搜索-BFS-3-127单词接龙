字典 wordList 中从单词 beginWord 和 endWord 的 转换序列 是一个按下述规格形成的序列：

序列中第一个单词是 beginWord 。
序列中最后一个单词是 endWord 。
每次转换只能改变一个字母。
转换过程中的中间单词必须是字典 wordList 中的单词。
给你两个单词 beginWord 和 endWord 和一个字典 wordList ，找到从 beginWord 到 endWord 的 最短转换序列 中的 单词数目 。如果不存在这样的转换序列，返回 0。

示例 1：
输入：beginWord = "hit", endWord = "cog", wordList = ["hot","dot","dog","lot","log","cog"]
输出：5
解释：一个最短转换序列是 "hit" -> "hot" -> "dot" -> "dog" -> "cog", 返回它的长度 5。

示例 2：
输入：beginWord = "hit", endWord = "cog", wordList = ["hot","dot","dog","lot","log"]
输出：0
解释：endWord "cog" 不在字典中，所以无法进行转换。
 
提示：

1 <= beginWord.length <= 10
endWord.length == beginWord.length
1 <= wordList.length <= 5000
wordList[i].length == beginWord.length
beginWord、endWord 和 wordList[i] 由小写英文字母组成
beginWord != endWord
wordList 中的所有字符串 互不相同

解题关键：
1.判断两个单词是否可以转换：两个单词有且仅有一个字母不同（辅助方法）
2.需要用boolean[]数组做标记，标记出已经使用过的单词
  这里用的方法很简单  因为给出的List<String> wordList是用的ArrayList 是有序的 可以根据每个单词的隐藏索引设置相应的数组索引
3.注意不要忘记标记beginWord已经使用过！
  
class Solution {
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        wordList.add(beginWord);
        boolean[] visited=new boolean[wordList.size()];
        visited[wordList.size()-1]=true;
        Queue<String>queue =new LinkedList<>();
        queue.add(beginWord);
        int count=0;
        while(!queue.isEmpty()){
            int size=queue.size();
            count++;
            while(size>0){
                size--;
                String currStr=queue.poll();
                if(currStr.equals(endWord)) return count; 
                for(int i=0;i<wordList.size();i++){
                    String str=wordList.get(i);
                    if(visited[i]) continue;
                    if(canTransfer(currStr, str)){
                        queue.add(str);
                        visited[i]=true;
                    }
                }

            }
        }
        return 0;

    }

    public boolean canTransfer(String a,String b){
        int n=1;
        for(int i=0;i<a.length() && n>=0;i++){
            if(a.charAt(i)!=b.charAt(i)) n--;
        }
        return n==0;
    }
}
