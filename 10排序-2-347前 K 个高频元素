给你一个整数数组 nums 和一个整数 k ，请你返回其中出现频率前 k 高的元素。你可以按 任意顺序 返回答案。

示例 1:
输入: nums = [1,1,1,2,2,3], k = 2
输出: [1,2]

示例 2:
输入: nums = [1], k = 1
输出: [1]
 
提示：

1 <= nums.length <= 105
k 的取值范围是 [1, 数组中不相同的元素的个数]
题目数据保证答案唯一，换句话说，数组中前 k 个高频元素的集合是唯一的
 
 桶排序思路：
 用List的数组：List<Integer>[] 作为若干个桶buckets保存每个元素出现的次数，buckets的下标即为当前list内的元素所出现的次数 从右往左出现的频率依次降低！
 
 class Solution {
    public int[] topKFrequent(int[] nums, int k) {
        Map<Integer,Integer> numForFreq=new HashMap<>();
        for(int num:nums){
            numForFreq.put(num,numForFreq.getOrDefault(num, 0)+1);
        }
        List<Integer>[] buckets=new List[nums.length+1];
        for(int num:numForFreq.keySet()){
            int freq=numForFreq.get(num);
            if(buckets[freq]==null) buckets[freq]=new ArrayList<>();
            buckets[freq].add(num);
        }
        List<Integer> list=new ArrayList<>();
        for(int i=buckets.length-1;i>=0;i--){
            if(list.size()==k) break;
            if(buckets[i]==null) continue;
            for(int num:buckets[i]){
                list.add(num);
            }
        }
        int[] res=new int[k];
        for(int i=0;i<res.length;i++){
            res[i]=list.get(i);
        } 
        return res;
    }
}
