给定正整数 n，找到若干个完全平方数（比如 1, 4, 9, 16, ...）使得它们的和等于 n。你需要让组成和的完全平方数的个数最少。
给你一个整数 n ，返回和为 n 的完全平方数的 最少数量 。
完全平方数 是一个整数，其值等于另一个整数的平方；换句话说，其值等于一个整数自乘的积。例如，1、4、9 和 16 都是完全平方数，而 3 和 11 不是。

示例 1：
输入：n = 12
输出：3 
解释：12 = 4 + 4 + 4

示例 2：
输入：n = 13
输出：2
解释：13 = 4 + 9
 
提示：
1 <= n <= 104

解题思路：可以将每个整数看成图中的一个节点，如果两个整数之差为一个平方数，那么这两个整数所在的节点就有一条边。要求解最小的平方数数量，就是求解从节点 n 到节点 0 的最短路径。
          也就是：从n出发，每次减去一个完全平方数，将差值加入队列中！！
解题关键：1.加入队列中的是每次减去完全平方数后的差  而不是完全平方数！切记切记！！
          2. 要用boolean[]数组标记！！！
          
class Solution {
    public int numSquares(int n) {
        List<Integer> squares=getSquares(n);
        int count=0;
        Queue<Integer> queue=new LinkedList<>();
        boolean[] visited=new boolean[n+1];
        queue.add(n);
        visited[n]=true;
        while(!queue.isEmpty()){
            int size=queue.size();
            count++;
            while(size>0){
                size--;
                int currNum=queue.poll();
                for(int square:squares){
                    int next=currNum-square;
                    if(next<0) break;
                    if(next==0) return count;
                    if(visited[next]) continue;
                    queue.add(next);
                    visited[next]=true;
                }
            }
            
        }
        return count;
    }

    public List<Integer> getSquares(int n){
        List<Integer> res=new ArrayList<>();
        int square=1;
        int diff=3;
        while(square<=n){
            res.add(square);
            square +=diff;
            diff +=2;

        }
        return res;
    }
}
