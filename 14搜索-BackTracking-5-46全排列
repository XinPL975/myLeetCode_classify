给定一个不含重复数字的数组 nums ，返回其 所有可能的全排列 。你可以 按任意顺序 返回答案。

示例 1：
输入：nums = [1,2,3]
输出：[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]

示例 2：
输入：nums = [0,1]
输出：[[0,1],[1,0]]

示例 3：
输入：nums = [1]
输出：[[1]]
 
提示：
1 <= nums.length <= 6
-10 <= nums[i] <= 10
nums 中的所有整数 互不相同


解题关键：
1. boolean[]数组标记！！
2. res.add(new ArrayList<>(path));！！！重点！因为加入res的是指向引用 如果不每次new一个新的ArrayList<>(),则最后都是同一个最开始定义的List<Integer> path   理解！！
3.记住List删除最后一个元素的方式是remove（index）
  对比StringBuilder删除指定char的方式是delete（int startIndex，intendIndex） 和  deleteAtChar（in index）！

class Solution {
    List<List<Integer>> res=new ArrayList<>();
    int n;
    public List<List<Integer>> permute(int[] nums) {
        if(nums==null || nums.length==0) return res;
        n=nums.length;
        boolean[] visited=new boolean[n];
        List<Integer> path=new ArrayList<>();
        backTracking(path,nums,visited);
        return res;
    }

    public void backTracking(List<Integer> path,int[] nums,boolean[] visited){
        if(path.size()==n){
            res.add(new ArrayList<>(path));   //关键重点！！！
            return;
        }
        for(int i=0;i<n;i++){
            if(visited[i]) continue;
            path.add(nums[i]);
            visited[i]=true;
            backTracking(path,nums,visited);
            visited[i]=false;
            path.remove(path.size()-1);

        }

    }
}
