给定一个非空且只包含非负数的整数数组 nums，数组的度的定义是指数组里任一元素出现频数的最大值。

你的任务是在 nums 中找到与 nums 拥有相同大小的度的最短连续子数组，返回其长度。

示例 1：
输入：[1, 2, 2, 3, 1]
输出：2
解释：
输入数组的度是2，因为元素1和2的出现频数最大，均为2.
连续子数组里面拥有相同度的有如下所示:
[1, 2, 2, 3, 1], [1, 2, 2, 3], [2, 2, 3, 1], [1, 2, 2], [2, 2, 3], [2, 2]
最短连续子数组[2, 2]的长度为2，所以返回2.

示例 2：
输入：[1,2,2,3,1,4,2]
输出：6
 
提示：

nums.length 在1到 50,000 区间范围内。
nums[i] 是一个在 0 到 49,999 范围内的整数。

解题思路：分别用三个HashMap保存 ：元素对应出现的次数、元素的起始索引、元素的最后索引

class Solution {
    public int findShortestSubArray(int[] nums) {
        Map<Integer,Integer> numFindCount=new HashMap<>();
        Map<Integer,Integer> numFindLastIndex=new HashMap<>();
        Map<Integer,Integer> numFindFirstIndex=new HashMap<>();
        for(int i=0;i<nums.length;i++){
            int num=nums[i];
             numFindLastIndex.put(num,i);
            if(numFindCount.containsKey(num)){
                numFindCount.put(num,numFindCount.get(num)+1);
            }else{
                numFindCount.put(num,1);
                numFindFirstIndex.put(num,i);
            }
        }
        int maxCount=0;
        for(int num:numFindCount.keySet()){              //优化关键：不需要把maxCount对应的元素都保存下来  只需要保存 maxCount  然后在下面筛选出count=maxCount的元素集合
            maxCount=Math.max(maxCount,numFindCount.get(num));
        }
        int res=nums.length;
        for(int num:numFindCount.keySet()){
            if(numFindCount.get(num)!=maxCount) continue;
            res=Math.min(res,numFindLastIndex.get(num)-numFindFirstIndex.get(num)+1);
        }
        return res;

    }
}
