给定一个二叉树，找出其最小深度。

最小深度是从根节点到最近叶子节点的最短路径上的节点数量。

说明：叶子节点是指没有子节点的节点。

示例 1：
输入：root = [3,9,20,null,null,15,7]
输出：2

示例 2：
输入：root = [2,null,3,null,4,null,5,null,6]
输出：5
 
提示：

树中节点数的范围在 [0, 105] 内
-1000 <= Node.val <= 1000

法一：时间消耗较多 但结构简单 
class Solution {
    public int minDepth(TreeNode root) {
        if(root==null) return 0;
        if(root.left==null && root.right==null){
            return 1;
        }else if(root.left==null){                 //注意：一定要考虑到root.left或者root.right中有一个为null的情况！！
            return 1+minDepth(root.right);
        }else if(root.right==null){
            return 1+minDepth(root.left);
        }else{
            return 1+Math.min(minDepth(root.left),minDepth(root.right));
        }
        
    }
}

法二：时间消耗少 但结构复杂
class Solution {
    public int minDepth(TreeNode root) {
        if(root==null) return 0;
        Queue<TreeNode> queue=new LinkedList<>();
        queue.offer(root);
        int mindepth=1;

        while(!queue.isEmpty()){
            int queueSize=queue.size();
            for(int i=0;i<queueSize;i++){
                TreeNode current=queue.poll();
                if(current.left==null && current.right==null) return mindepth;
                if(current.left!=null)  queue.offer(current.left);
                if(current.right!=null) queue.offer(current.right);
            }
            mindepth++;
        }
        return mindepth;
    }
}
