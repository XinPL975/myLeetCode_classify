给定一个无重复元素的数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。
candidates 中的数字可以无限制重复被选取。

说明：
所有数字（包括 target）都是正整数。
解集不能包含重复的组合。 

示例 1：
输入：candidates = [2,3,6,7], target = 7,
所求解集为：
[
  [7],
  [2,2,3]
]

示例 2：
输入：candidates = [2,3,5], target = 8,
所求解集为：
[
  [2,2,2,2],
  [2,3,3],
  [3,5]
]
 
提示：
1 <= candidates.length <= 30
1 <= candidates[i] <= 200
candidate 中的每个元素都是独一无二的。
1 <= target <= 500

解题关键：
1.形成从target反向减各个元素的思维 直至target为0
2.为了组合不重复，形成从特定索引（start）开始搜索的思维！

class Solution {
    private List<List<Integer>> res=new ArrayList<>();
    private int n;

    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        if(candidates==null || candidates.length==0) return res;
        List<Integer> path=new ArrayList<>();
        n=candidates.length;
        backTracking(candidates, target, 0, path);
        return res;

    }

    public void backTracking(int[] candidates,int target,int start,List<Integer> path){
        if(target==0){
            res.add(new ArrayList<>(path));
            return;
        }
        for(int i=start;i<n;i++){
            int num=candidates[i];
            if(num>target) continue;
            path.add(num);
            backTracking(candidates, target-num, i, path);
            path.remove(path.size()-1);
        }

    }
}
