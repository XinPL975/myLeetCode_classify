给你两个 非空 链表来代表两个非负整数。数字最高位位于链表开始位置。它们的每个节点只存储一位数字。将这两数相加会返回一个新的链表。

你可以假设除了数字 0 之外，这两个数字都不会以零开头。

进阶：

如果输入链表不能修改该如何处理？换句话说，你不能对列表中的节点进行翻转。


示例：

输入：(7 -> 2 -> 4 -> 3) + (5 -> 6 -> 4)
输出：7 -> 8 -> 0 -> 7

class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        if(l1==null) return l2;
        if(l2==null) return l1;
        Stack<Integer> stack1=new Stack<>();
        Stack<Integer> stack2=new Stack<>();
        while(l1!=null){
            stack1.push(l1.val);
            l1=l1.next;
        }
        while(l2!=null){
            stack2.push(l2.val);
            l2=l2.next;
        }
        int res;
        int carry=0;
        ListNode last=null;
        ListNode curr;
        while(!stack1.isEmpty() || !stack2.isEmpty() || carry!=0){
            int a=(stack1.isEmpty())?0:stack1.pop();
            int b=(stack2.isEmpty())?0:stack2.pop();
            res=a+b+carry;
            carry=res/10;    //！注意/10和%10不要搞混了！
            res=res%10;
            curr=new ListNode(res);
            curr.next=last;
            last=curr;
        }
        return last;
      

    }
}
