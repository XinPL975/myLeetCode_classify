你这个学期必须选修 numCourses 门课程，记为 0 到 numCourses - 1 。

在选修某些课程之前需要一些先修课程。 先修课程按数组 prerequisites 给出，其中 prerequisites[i] = [ai, bi] ，表示如果要学习课程 ai 则 必须 先学习课程  bi 。

例如，先修课程对 [0, 1] 表示：想要学习课程 0 ，你需要先完成课程 1 。
请你判断是否可能完成所有课程的学习？如果可以，返回 true ；否则，返回 false 。

示例 1：
输入：numCourses = 2, prerequisites = [[1,0]]
输出：true
解释：总共有 2 门课程。学习课程 1 之前，你需要完成课程 0 。这是可能的。

示例 2：
输入：numCourses = 2, prerequisites = [[1,0],[0,1]]
输出：false
解释：总共有 2 门课程。学习课程 1 之前，你需要先完成​课程 0 ；并且学习课程 0 之前，你还应先完成课程 1 。这是不可能的。
 
提示：

1 <= numCourses <= 105
0 <= prerequisites.length <= 5000
prerequisites[i].length == 2
0 <= ai, bi < numCourses
prerequisites[i] 中的所有课程对 互不相同

解题关键：用数组List表示出每个课程学之前需要先学的课程！

class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        List<Integer>[] graphs=new List[numCourses];
        for(int i=0;i<numCourses;i++){
            graphs[i]=new ArrayList<>();
        }
        for(int[] pre:prerequisites){
            graphs[pre[0]].add(pre[1]);
        }
        int[] flags=new int[numCourses];   //flags中：0表示还未遍历 -1表示已经完成遍历且没有闭环  1表示正在遍历   //若单个循环遍历中遇到1 则说明为闭环
        for(int i=0;i<numCourses;i++){
            if(isCircle(i,flags,graphs)) return false;
        }
        return true;
    }

    boolean isCircle(int currNode,int[] flags,List<Integer>[] graphs){
        if(flags[currNode]==-1) return false;
        if(flags[currNode]==1) return true; 
        flags[currNode]=1;
        for(int pre:graphs[currNode]){
            if(isCircle(pre,flags,graphs)) return true;
        }
        flags[currNode]=-1;
        return false;

    }
}
