给定一个包含非负整数的 m x n 网格 grid ，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。
说明：每次只能向下或者向右移动一步。

示例 1：
输入：grid = [[1,3,1],[1,5,1],[4,2,1]]
输出：7
解释：因为路径 1→3→1→1→1 的总和最小。

示例 2：
输入：grid = [[1,2,3],[4,5,6]]
输出：12
 
提示：
m == grid.length
n == grid[i].length
1 <= m, n <= 200
0 <= grid[i][j] <= 100

解题关键：注意每次只能向下或者向右移动一步！！

法一：空间复杂度O(mn)   用一个矩阵保存所有状态
class Solution {
    public int minPathSum(int[][] grid) {
        if(grid==null || grid.length==0) return 0;
        int m=grid.length,n=grid[0].length;
        int[][] dp=new int[m][n];
        dp[0][0]=grid[0][0];
        for(int i=1;i<n;i++){
            dp[0][i]=dp[0][i-1]+grid[0][i];
        }
        for(int i=1;i<m;i++){
            dp[i][0]=dp[i-1][0]+grid[i][0];
        }
        for(int i=1;i<m;i++){
            for(int j=1;j<n;j++){
                dp[i][j]=Math.min(dp[i][j-1],dp[i-1][j])+grid[i][j];
            }
        }
        return dp[m-1][n-1];
    }
}

法二：优化：空间复杂度O(n)  只用一个数组保存当前的状态
class Solution {
    public int minPathSum(int[][] grid) {
        if(grid==null || grid.length==0) return 0;
        int m=grid.length,n=grid[0].length;
        int[] dp=new int[n];         //最后结果只与当前行和上一行的结果有关！！
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(j==0) dp[j]=dp[j];
                else if(i==0) dp[j]=dp[j-1];
                else dp[j]=Math.min(dp[j-1],dp[j]);
                dp[j] +=grid[i][j];
            }
        }
        return dp[n-1];
    }
}

