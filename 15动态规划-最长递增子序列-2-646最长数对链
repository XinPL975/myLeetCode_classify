给出 n 个数对。 在每一个数对中，第一个数字总是比第二个数字小。
现在，我们定义一种跟随关系，当且仅当 b < c 时，数对(c, d) 才可以跟在 (a, b) 后面。我们用这种形式来构造一个数对链。
给定一个数对集合，找出能够形成的最长数对链的长度。你不需要用到所有的数对，你可以以任何顺序选择其中的一些数对来构造。

示例：
输入：[[1,2], [2,3], [3,4]]
输出：2
解释：最长的数对链是 [1,2] -> [3,4]

class Solution {
    public int findLongestChain(int[][] pairs) {
        if(pairs==null ||pairs.length==0) return 0;
        Arrays.sort(pairs, new Comparator<int[]>(){
            @Override
            public int compare(int[] nums1,int[] nums2){
                return nums1[1]>nums2[1]?1:(nums1[1]==nums2[1]?0:-1);       //这里貌似对nums[0]排序也可以！
            }
        });
        int n=pairs.length;
        int[] dp=new int[n];
        Arrays.fill(dp, 1);
        for(int i=1;i<n;i++){
            for(int j=0;j<i;j++){
                 if(pairs[i][0]>pairs[j][1]) dp[i]=Math.max(dp[i],dp[j]+1);  //同样dp[i]保存的是以pairs[i]结尾的最长数对链长度！
            }
        }
        int max=0;
        for(int num:dp){
            max=Math.max(max,num);
        }
        return max;
    }
}
