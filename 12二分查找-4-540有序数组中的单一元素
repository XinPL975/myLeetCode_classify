给定一个只包含整数的有序数组，每个元素都会出现两次，唯有一个数只会出现一次，找出这个数。

示例 1:
输入: [1,1,2,3,3,4,4,8,8]
输出: 2

示例 2:
输入: [3,3,7,7,10,11,11]
输出: 10

注意: 您的方案应该在 O(log n)时间复杂度和 O(1)空间复杂度中运行。

法一：二分查找 时间复杂度为O(log n)
解题思路：
令 index 为 Single Element 在数组中的位置。在 index 之后，数组中原来存在的成对状态被改变。
如果 m 为偶数，并且 m + 1 < index，那么 nums[m] == nums[m + 1]；m + 1 >= index，那么 nums[m] != nums[m + 1]。

class Solution {
    public int singleNonDuplicate(int[] nums) {
        int left=0,right=nums.length-1;
        while(left<right){
            int mid=left+(right-left)/2;
            if(mid%2==1) mid--;      //注意这里只能用mid--不能用mid++！！
            if(nums[mid]==nums[mid+1]) left=mid+2;
            else right=mid;
        }
        return nums[left];
    }
}

法二：位计算 时间复杂度为 O(N)
class Solution {
    public int singleNonDuplicate(int[] nums) {
        int res=0;
        for(int num: nums){
            res=res^num;
        }
        return res;
    }
}
