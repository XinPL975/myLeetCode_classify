给定一个循环数组（最后一个元素的下一个元素是数组的第一个元素），输出每个元素的下一个更大元素。数字 x 的下一个更大的元素是按数组遍历顺序，这个数字之后的第一个比它更大的数，这意味着你应该循环地搜索它的下一个更大的数。如果不存在，则输出 -1。

示例 1:
输入: [1,2,1]
输出: [2,-1,2]
解释: 第一个 1 的下一个更大的数是 2；
数字 2 找不到下一个更大的数； 
第二个 1 的下一个最大的数需要循环搜索，结果也是 2。
注意: 输入数组的长度不会超过 10000。

class Solution {
    public int[] nextGreaterElements(int[] nums) {
        int size=nums.length;
        int[] res=new int[size];
        Arrays.fill(res,-1);
        Stack<Integer> stack=new Stack<>();
        for(int i=0;i<size*2;i++){
            int currnum=nums[i%size];            //优化关键一：nums[i%size]用到了好几次 不用存储i%size  而是直接将其整体存储为currnum  避免数组重复搜索！
            while(!stack.isEmpty() && currnum>nums[stack.peek()]){
                int topIndex=stack.pop();
                res[topIndex]=currnum;
            }
            if(i<size) stack.push(i);          //优化关键二：只对nums数组索引0~size-1 进行查找下一个更大元素 因此只让i<size的部分进栈即可 重复部分不需要！！
        }
        return res;
    }
}

