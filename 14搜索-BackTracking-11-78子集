给你一个整数数组 nums ，数组中的元素 互不相同 。返回该数组所有可能的子集（幂集）。

解集 不能 包含重复的子集。你可以按 任意顺序 返回解集。

示例 1：
输入：nums = [1,2,3]
输出：[[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]

示例 2：
输入：nums = [0]
输出：[[],[0]]
 
提示：

1 <= nums.length <= 10
-10 <= nums[i] <= 10
nums 中的所有元素 互不相同

解题关键：
子集 结束条件均不同  可以在主函数中写循环规定每次子集的个数 再进行DFS回溯！

class Solution {
    private List<List<Integer>> res=new ArrayList<>();
    private int n;
    public List<List<Integer>> subsets(int[] nums) {
        res.add(new ArrayList<>());
        if(nums==null || nums.length==0) return res;
        List<Integer> path=new ArrayList<>();
        n=nums.length;    //大哥！不要忘记赋值啊！
        for(int i=1;i<=n;i++){
            backTracking(0, i, path, nums);
        }
        return res;
    }

    public void backTracking(int start,int count,List<Integer> path,int[] nums){
        if(path.size()==count){
            res.add(new ArrayList<>(path));
            return;
        }
        for(int i=start;i<n;i++){
            path.add(nums[i]);
            backTracking(i+1, count, path, nums);
            path.remove(path.size()-1);
        }
    }
}

