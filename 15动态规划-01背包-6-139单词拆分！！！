给定一个非空字符串 s 和一个包含非空单词的列表 wordDict，判定 s 是否可以被空格拆分为一个或多个在字典中出现的单词。
说明：
拆分时可以重复使用字典中的单词。
你可以假设字典中没有重复的单词。

示例 1：
输入: s = "leetcode", wordDict = ["leet", "code"]
输出: true
解释: 返回 true 因为 "leetcode" 可以被拆分成 "leet code"。

示例 2：
输入: s = "applepenapple", wordDict = ["apple", "pen"]
输出: true
解释: 返回 true 因为 "applepenapple" 可以被拆分成 "apple pen apple"。
     注意你可以重复使用字典中的单词。

示例 3：
输入: s = "catsandog", wordDict = ["cats", "dog", "sand", "and", "cat"]
输出: false

解题关键：
1.dict 中的单词没有使用次数的限制，因此这是一个完全背包问题。
2.该问题涉及到字典中单词的使用顺序，也就是说物品必须按一定顺序放入背包中（与无序的问题加以区分！！）
3.因此，对物品的迭代应该放在最里层，对背包的迭代放在外层，只有这样才能让物品按一定顺序放入背包中！！理解！！

class Solution {
    public boolean wordBreak(String s, List<String> wordDict) {
        int n=s.length();
        boolean[] dp=new boolean[n+1];
        dp[0]=true;         //初始化！！！不要忘记了！！
        for(int i=1;i<=n;i++){
            for(String word:wordDict){
                int len=word.length();          //关键代码 直接计算每一个单词的长度 就不需要多加一层循环！！妙啊！！
                if(len<=i && word.equals(s.substring(i-len, i))){
                    dp[i]=dp[i] || dp[i-len];
                }
            }
        }
        return dp[n];
    }
}
