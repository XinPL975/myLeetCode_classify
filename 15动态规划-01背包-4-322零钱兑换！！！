给定不同面额的硬币 coins 和一个总金额 amount。编写一个函数来计算可以凑成总金额所需的最少的硬币个数。如果没有任何一种硬币组合能组成总金额，返回 -1。
你可以认为每种硬币的数量是无限的。

示例 1：
输入：coins = [1, 2, 5], amount = 11
输出：3 
解释：11 = 5 + 5 + 1

示例 2：
输入：coins = [2], amount = 3
输出：-1

示例 3：
输入：coins = [1], amount = 0
输出：0

示例 4：
输入：coins = [1], amount = 1
输出：1

示例 5：
输入：coins = [1], amount = 2
输出：2

解题思路：
因为硬币可以重复使用，因此这是一个完全背包问题。
完全背包只需要将 0-1 背包的逆序遍历 dp 数组改为正序遍历即可！！！

class Solution {
    public int coinChange(int[] coins, int amount) {
        if(coins==null || coins.length==0) return 0;
        int[] dp=new int[amount+1];
        Arrays.fill(dp, amount+1);
        dp[0]=0;                  //关键！！！初始化！！！
        for(int coin:coins){
            for(int i=coin;i<=amount;i++){             //优化关键：直接让i从coin开始！就不用判断i<coin的情况了！！
                dp[i]=Math.min(dp[i],dp[i-coin]+1);
            }
        }
        return dp[amount]==amount+1?-1:dp[amount];
    }
}
