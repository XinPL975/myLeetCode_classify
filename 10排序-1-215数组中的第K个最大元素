在未排序的数组中找到第 k 个最大的元素。请注意，你需要找的是数组排序后的第 k 个最大的元素，而不是第 k 个不同的元素。

示例 1:
输入: [3,2,1,5,6,4] 和 k = 2
输出: 5

示例 2:
输入: [3,2,3,1,2,4,5,5,6] 和 k = 4
输出: 4

说明:

你可以假设 k 总是有效的，且 1 ≤ k ≤ 数组的长度。

法一：暴力排序 调用Arrays类的排序方法
class Solution {
    public int findKthLargest(int[] nums, int k) {
        Arrays.sort(nums);
        return nums[nums.length-k];
    }
}

法二：堆排序（java中是最小堆） 一旦超过k个元素 就将栈顶元素（最小的元素）删除  最终留下最大的k个元素 
class Solution {
    public int findKthLargest(int[] nums, int k) {
        PriorityQueue<Integer> queue=new PriorityQueue<>();
        for(int num:nums){
            queue.add(num);
            if(queue.size()>k) queue.poll();
        }
        return queue.peek();
    }
}

法三：快速排序****好难啊！！
快速排序的思想：
从子数组a[l⋯r] 中选择任意一个元素 x作为主元，调整子数组的元素使得左边的元素都小于等于它，右边的元素都大于等于它， x 的最终位置就是 q。
由此可以发现每次经过「划分」操作后，我们一定可以确定一个元素的最终位置，即 x的最终位置为 q，并且保证a[l⋯q−1] 中的每个元素小于等于a[q]，且 a[q]小于等于a[q+1⋯r] 中的每个元素。
所以只要某次划分的 q为倒数第 k个下标的时候，我们就已经找到了答案。 我们只关心这一点，至于a[l⋯q−1] 和 a[q+1⋯r] 是否是有序的，我们不关心。
注意：本次解题中每次选择子数组中的最左边一个元素作为主元！！

class Solution {
    public int findKthLargest(int[] nums, int k) {
        int i=0,j=nums.length-1;
        int target=nums.length-k;  //目标索引
        while(i<j){
            int index=partition(nums,i,j);
            if(index==target) return nums[target];
            else if(index<target) i=index+1;
            else j=index-1;
        }
        return nums[target];
        
    }
   
    int partition(int[] nums,int left,int right){
        int i=left,j=right+1;
        while(true){
            while(nums[++i]<nums[left] && i<right) ;
            while(nums[--j]>nums[left] && j>left) ;
            if(i>=j) break;
            swap(nums,i,j);
        }
        swap(nums,left,j);
        return j;
    }

    void swap(int[] nums,int i,int j){
        int temp=nums[i];
        nums[i]=nums[j];
        nums[j]=temp;
    }
}
