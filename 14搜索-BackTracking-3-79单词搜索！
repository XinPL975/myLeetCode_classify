给定一个 m x n 二维字符网格 board 和一个字符串单词 word 。如果 word 存在于网格中，返回 true ；否则，返回 false 。
单词必须按照字母顺序，通过相邻的单元格内的字母构成，其中“相邻”单元格是那些水平相邻或垂直相邻的单元格。同一个单元格内的字母不允许被重复使用。

示例 1：
输入：board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "ABCCED"
输出：true

示例 2：
输入：board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "SEE"
输出：true

示例 3：
输入：board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "ABCB"
输出：false
 
提示：
m == board.length
n = board[i].length
1 <= m, n <= 6
1 <= word.length <= 15
board 和 word 仅由大小写英文字母组成

解题关键：注意审题：同一个单元格内的字母不允许被重复使用！所以需要boolean[][]数组标注是否在该次遍历中被访问过！！

class Solution {
    private int[][] directions={{0,1},{0,-1},{-1,0},{1,0}};
    private int m,n;

    public boolean exist(char[][] board, String word) {
        if(word==null || word.length()==0) return true;
        if(board==null || board.length==0) return false;
        m=board.length;
        n=board[0].length;
        boolean[][] visited=new boolean[m][n];
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(backTracking(0,board, word, i, j,visited)) return true;
            }
        }
        return false;
    }

    public boolean backTracking(int currLen,char[][] board,String word,int row,int column,boolean[][] visited){
        if(currLen==word.length()) return true;
        if(row<0 || row >=m || column<0 || column>=n || board[row][column]!=word.charAt(currLen) || visited[row][column]) return false;
        visited[row][column]=true;
        for(int[] direction:directions){
            if(backTracking(currLen+1,board, word, row+direction[0], column+direction[1],visited)) return true;
        }
        visited[row][column]=false;   //不要忘记这一步！
        return false;
    }
}
