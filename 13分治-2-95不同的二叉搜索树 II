给定一个整数 n，生成所有由 1 ... n 为节点所组成的 二叉搜索树 。

示例：
输入：3
输出：
[
  [1,null,3,2],
  [3,2,null,1],
  [3,1,null,null,2],
  [2,1,3],
  [1,null,2,null,3]
]
解释：
以上的输出对应以下 5 种不同结构的二叉搜索树：

   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3


解题思路：
1.将连续的数，一个个遍历，作为根节点
2.每次遍历中，将左边的数组和右边的数组分别进行递归，构建子树，并接到当前根节点上

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<TreeNode> generateTrees(int n) {
        if(n<1) return new ArrayList<TreeNode>();    //加上这一步运行时间会减少！
        return generateSubTrees(1,n);
    }

    public List<TreeNode> generateSubTrees(int start,int end){
        List<TreeNode> res=new ArrayList<>();
        if(start>end){
            res.add(null);
            return res;
        }
        for(int root=start;root<=end;root++){
            List<TreeNode> leftTree=generateSubTrees(start,root-1);
            List<TreeNode> rightTree=generateSubTrees(root+1,end);
            for(TreeNode left:leftTree){
                for(TreeNode right:rightTree){
                    res.add(new TreeNode(root,left,right));
                }
            }
        }
        return res;
    }
}
