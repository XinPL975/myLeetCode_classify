给定一个二叉树，在树的最后一行找到最左边的值。

示例 1:

输入:

    2
   / \
  1   3

输出:
1
 
示例 2:

输入:

        1
       / \
      2   3
     /   / \
    4   5   6
       /
      7

输出:
7
 
注意: 您可以假设树（即给定的根节点）不为 NULL。

 //！！注意：虽然是层次遍历，但不需要区分每一层的节点，所以不需要求每层树的节点个数以及将各个层的节点分开处理，与637题做对比！
 
class Solution {
    public int findBottomLeftValue(TreeNode root) {
        Queue<TreeNode> queue=new LinkedList<>();
        queue.offer(root);
        TreeNode node=new TreeNode(-1);
        while(!queue.isEmpty()){           
            node=queue.poll();
            if(node.right!=null) queue.offer(node.right);
            if(node.left!=null) queue.offer(node.left);
            
        }
        return node.val;
        

    }
}
