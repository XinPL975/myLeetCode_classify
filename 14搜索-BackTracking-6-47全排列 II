给定一个可包含重复数字的序列 nums ，按任意顺序 返回所有不重复的全排列。

示例 1：
输入：nums = [1,1,2]
输出：
[[1,1,2],
 [1,2,1],
 [2,1,1]]

示例 2：
输入：nums = [1,2,3]
输出：[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]
 
提示：

1 <= nums.length <= 8
-10 <= nums[i] <= 10


解题关键：
1.先对数组排序，将相同的元素排列到一起
2.每次检查当前元素是否与前一个元素相等 且前一个是否被访问过
  若相等 且前一个元素没有被访问 则continue  防止重复排列
  
class Solution {
    private List<List<Integer>> res=new ArrayList<>();
    int n;
    public List<List<Integer>> permuteUnique(int[] nums) {
        if(nums==null || nums.length==0) return res;
        Arrays.sort(nums);   //关键代码！先排序！
        n=nums.length;
        boolean[] visited=new boolean[n];
        List<Integer> path=new ArrayList<>();
        backTracking(path, nums, visited);
        return res;


    }

    public void backTracking(List<Integer> path,int[] nums,boolean[] visited){
        if(path.size()==n){
            res.add(new ArrayList<>(path));
            return;
        }
        for(int i=0;i<n;i++){
            if(visited[i]) continue;
            if(i>0 && nums[i]==nums[i-1] && !visited[i-1]) continue;   //关键代码！实现：所有不重复的全排列
            path.add(nums[i]);
            visited[i]=true;
            backTracking(path, nums, visited);
            visited[i]=false;
            path.remove(path.size()-1);
        }

    }
}
