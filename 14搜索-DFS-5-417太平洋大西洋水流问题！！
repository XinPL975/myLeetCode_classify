给定一个 m x n 的非负整数矩阵来表示一片大陆上各个单元格的高度。“太平洋”处于大陆的左边界和上边界，而“大西洋”处于大陆的右边界和下边界。
规定水流只能按照上、下、左、右四个方向流动，且只能从高到低或者在同等高度上流动。
请找出那些水流既可以流动到“太平洋”，又能流动到“大西洋”的陆地单元的坐标。

提示：
输出坐标的顺序不重要
m 和 n 都小于150
 
示例：
给定下面的 5x5 矩阵:

  太平洋 ~   ~   ~   ~   ~ 
       ~  1   2   2   3  (5) *
       ~  3   2   3  (4) (4) *
       ~  2   4  (5)  3   1  *
       ~ (6) (7)  1   4   5  *
       ~ (5)  1   1   2   4  *
          *   *   *   *   * 大西洋

返回:
[[0, 4], [1, 3], [1, 4], [2, 2], [3, 0], [3, 1], [4, 0]] (上图中带括号的单元).


解题关键：
1.观察到与大西洋或太平洋紧挨着的区域（即边界）是肯定可以流入相应的海洋的，因此从边界入手！
2.与边界相邻的点 将其进入递归 依次判断其值是否大于等于边界 若是 则可以流入大西洋/太平洋
3.设置两个boolean[][]记录各个点是否可以流入大西洋/太平洋！

class Solution {

    private int[][] directions={{0,1},{0,-1},{-1,0},{1,0}};
    private int m,n;

    public List<List<Integer>> pacificAtlantic(int[][] heights) {
        List<List<Integer>> res=new ArrayList<>();
        if(heights==null || heights.length==0) return res;
        m=heights.length;
        n=heights[0].length;
        boolean[][] canReachP=new boolean[m][n];
        boolean[][] canReachA=new boolean[m][n];
        for(int i=0;i<n;i++){
            dfs(heights,canReachP,0,i);       //细节！这里不用多此一举地直接设置canReachP、canReachA为true！直接将其进入递归即可！
            dfs(heights,canReachA, m-1, i);
        }
        for(int i=0;i<m;i++){
            dfs(heights,canReachP, i, 0);
            dfs(heights,canReachA, i,n-1);
        }
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(canReachP[i][j] && canReachA[i][j]){
                    res.add(Arrays.asList(i,j));
                }
            }
        }
        return res;


    }

    public void dfs(int[][] heights,boolean[][] canReach,int row,int column){
        if(row<0 || row>=m || column<0 || column>=n) return;
        if(canReach[row][column]) return;
        canReach[row][column]=true;
        for(int[] direction:directions){
            int newRow=row+direction[0];
            int newColumn=column+direction[1];
            if(newRow<0 || newRow>=m || newColumn<0 || newColumn>=n || heights[newRow][newColumn]<heights[row][column]) continue;
            dfs(heights,canReach, newRow, newColumn);
        }
    }
}
