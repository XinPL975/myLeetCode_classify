给你一个由 '1'（陆地）和 '0'（水）组成的的二维网格，请你计算网格中岛屿的数量。

岛屿总是被水包围，并且每座岛屿只能由水平方向和/或竖直方向上相邻的陆地连接形成。

此外，你可以假设该网格的四条边均被水包围。

示例 1：

输入：grid = [
  ["1","1","1","1","0"],
  ["1","1","0","1","0"],
  ["1","1","0","0","0"],
  ["0","0","0","0","0"]
]
输出：1

示例 2：

输入：grid = [
  ["1","1","0","0","0"],
  ["1","1","0","0","0"],
  ["0","0","1","0","0"],
  ["0","0","0","1","1"]
]
输出：3
 
提示：
m == grid.length
n == grid[i].length
1 <= m, n <= 300
grid[i][j] 的值为 '0' 或 '1'


解题关键：
1.注意这里的grid是char[][]的形式 不是int！ 仔细！！
2.相比前一题关注的最大岛屿的面积 这一题关注岛屿的个数 所以dfs函数不需要返回岛屿面积  只需要遇到1就将count++ 并且将相连的岛屿1置为0即可！

class Solution {
    private int[][] directions={{0,1},{0,-1},{-1,0},{1,0}};
    private int m,n;
    public int numIslands(char[][] grid) {
        if(grid==null || grid.length==0) return 0;
        m=grid.length;
        n=grid[0].length;
        int count=0;
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]=='0') continue;
                if(dfs(i, j, grid)) count++;
            }
        }
        return count;

    }

    public boolean dfs(int row,int column,char[][] grid){
        if(row<0 || row>=m || column<0 || column>=n || grid[row][column]=='0') return false;
        grid[row][column]='0';
        for(int[] direction:directions){
            dfs(row+direction[0], column+direction[1], grid);
        }
        return true;
    }
}
