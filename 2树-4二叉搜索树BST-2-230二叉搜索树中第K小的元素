给定一个二叉搜索树的根节点 root ，和一个整数 k ，请你设计一个算法查找其中第 k 个最小元素（从 1 开始计数）。

示例 1：
输入：root = [3,1,4,null,2], k = 1
输出：1

示例 2：
输入：root = [5,3,6,2,4,null,null,1], k = 3
输出：3
 
提示：

树中的节点数为 n 。
1 <= k <= n <= 104
0 <= Node.val <= 104

法一：时间和内存消耗更小

class Solution {
    public int kthSmallest(TreeNode root, int k) {
        if(root==null) return -1;
        int left=numbers(root.left);
        if(k<=left){
            return kthSmallest(root.left, k);
        }else if(k==left+1){
            return root.val; 
        }else{
            return kthSmallest(root.right, k-left-1);
        }
    }

    int numbers(TreeNode root){
        if(root==null) return 0;
        return 1+numbers(root.left)+numbers(root.right);
    }

}


法二：

class Solution {
    List<Integer> list=new ArrayList<>();
    public int kthSmallest(TreeNode root, int k) {
        traverse(root);
        return list.get(k-1);
    }

    void traverse(TreeNode root){
        if(root==null) return;
        traverse(root.left);
        list.add(root.val);
        traverse(root.right);

    }

}
