给定一个字符串数组 words，找到 length(word[i]) * length(word[j]) 的最大值，并且这两个单词不含有公共字母。你可以认为每个单词只包含小写字母。如果不存在这样的两个单词，返回 0。

示例 1:
输入: ["abcw","baz","foo","bar","xtfn","abcdef"]
输出: 16 
解释: 这两个单词为 "abcw", "xtfn"。

示例 2:
输入: ["a","ab","abc","d","cd","bcd","abcd"]
输出: 4 
解释: 这两个单词为 "ab", "cd"。

示例 3:
输入: ["a","aa","aaa","aaaa"]
输出: 0 
解释: 不存在这样的两个单词。

解题关键：如何判定两个单词不含有公共字母 
         因为小写字母一共26个 而int型二进制表示有32位  因此可以用二进制的每一位是否为1表示是否出现对应的字母
         而两个数相与&若为0  则表示两个数代表的单词没有相同的字母   巧妙！

class Solution {
    public int maxProduct(String[] words) {
        int n=words.length;
        int[] wordForVal=new int[n];
        for(int i=0;i<n;i++){
            for(char c:words[i].toCharArray()){
                wordForVal[i]=wordForVal[i] | (1<<(c-'a'));
            }
        }
        int res=0;
        for(int i=0;i<n;i++){
            for(int j=i+1;j<n;j++){
                if((wordForVal[i] & wordForVal[j])==0){
                    res=Math.max(res,words[i].length()*words[j].length());
                }
            }
        }
        return res;
    }
}
