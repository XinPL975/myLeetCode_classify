实现一个 Trie (前缀树)，包含 insert, search, 和 startsWith 这三个操作。

示例:

Trie trie = new Trie();

trie.insert("apple");
trie.search("apple");   // 返回 true
trie.search("app");     // 返回 false
trie.startsWith("app"); // 返回 true
trie.insert("app");   
trie.search("app");     // 返回 true

说明:
你可以假设所有的输入都是由小写字母 a-z 构成的。
保证所有输入均为非空字符串。

class Trie {
    class Node{
        Node[] children=new Node[26];
        boolean isLeaf;
    }
    
    Node root=new Node();
    /** Initialize your data structure here. */
    public Trie() {

    }
    
    /** Inserts a word into the trie. */
    public void insert(String word) {
        insert(word,root);
    }

    void insert(String word,Node root){
        if(root==null) return;
        if(word.length()==0){
            root.isLeaf=true;
            return;
        }
        int index=charForIndex(word.charAt(0));
        if(root.children[index]==null) root.children[index]=new Node();
        insert(word.substring(1),root.children[index]);
    }
    
    /** Returns if the word is in the trie. */
    public boolean search(String word) {
        return search(word,root);
    }

    boolean search(String word,Node root){
        if(root==null) return false;
        if(word.length()==0) return root.isLeaf;
        int index=charForIndex(word.charAt(0));
        if(root.children[index]==null) return false;
        return search(word.substring(1),root.children[index]);
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    public boolean startsWith(String prefix) {
        return startsWith(prefix,root);
    }

    boolean startsWith(String prefix,Node root){
        if(root==null) return false;
        if(prefix.length()==0) return true;
        int index=charForIndex(prefix.charAt(0));
        if(root.children[index]==null) return false;
        return startsWith(prefix.substring(1),root.children[index]);
    }

    int charForIndex(char c){
        return c-'a';
    }
}

/**
 * Your Trie object will be instantiated and called as such:
 * Trie obj = new Trie();
 * obj.insert(word);
 * boolean param_2 = obj.search(word);
 * boolean param_3 = obj.startsWith(prefix);
 */
