给定两个整数 n 和 k，返回 1 ... n 中所有可能的 k 个数的组合。

示例:
输入: n = 4, k = 2
输出:
[
  [2,4],
  [3,4],
  [2,3],
  [1,2],
  [1,3],
  [1,4],
]

解题关键
1.组合 要求是不重复的元素组合！因此设置start每次从start往后取元素 保证组合不会出现重复

优化关键！！
1.因为本身就是不重复的元素1-n 且组合也要求不重复 设置了每次从start开始往后取元素的方式  就不需要再设置boolean[]数组标记 理解！！
2.在循环取元素时候限制范围！不需要从start到n ！第一个元素只会在start到n-(k-1)中取值！！因为后面至少要保证有k-1个元素供组合！！妙啊！！
相应的 每次递归回溯k也要变化 k-1

class Solution {
    private List<List<Integer>> res=new ArrayList<>();
    public List<List<Integer>> combine(int n, int k) {
        if(n<=0) return res;
        List<Integer> path=new ArrayList<>();
        backTracking(1,path, n, k);
        return res;

    }

    public void backTracking(int start,List<Integer> path,int n,int k){
        if(k==0){
            res.add(new ArrayList<>(path));
            return;
        }
        for(int i=start;i<=n-k+1;i++){   //关键代码！！剪枝！！
            path.add(i);
            backTracking(i+1,path, n, k-1);
            path.remove(path.size()-1);
        }
    }
}
