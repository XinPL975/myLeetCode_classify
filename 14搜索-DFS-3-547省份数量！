有 n 个城市，其中一些彼此相连，另一些没有相连。如果城市 a 与城市 b 直接相连，且城市 b 与城市 c 直接相连，那么城市 a 与城市 c 间接相连。
省份 是一组直接或间接相连的城市，组内不含其他没有相连的城市。
给你一个 n x n 的矩阵 isConnected ，其中 isConnected[i][j] = 1 表示第 i 个城市和第 j 个城市直接相连，而 isConnected[i][j] = 0 表示二者不直接相连。
返回矩阵中 省份 的数量。

示例 1：
输入：isConnected = [[1,1,0],[1,1,0],[0,0,1]]
输出：2

示例 2：
输入：isConnected = [[1,0,0],[0,1,0],[0,0,1]]
输出：3
 
提示：

1 <= n <= 200
n == isConnected.length
n == isConnected[i].length
isConnected[i][j] 为 1 或 0
isConnected[i][i] == 1
isConnected[i][j] == isConnected[j][i]


解题关键
1.以n个城市为中心进行标记！！ 而不是isConnected
2.遍历城市1-n 若城市没有访问到 则将count++ 同时标记 并进入递归寻找与当前城市联通的城市 将其均进行标记！

class Solution {
    private int n;
    private int count=0;
    public int findCircleNum(int[][] isConnected) {
        if(isConnected==null || isConnected.length==0) return 0;
        n=isConnected.length;
        boolean[] visited=new boolean[n];
        for(int i=0;i<n;i++){
            if(visited[i]) continue;
            count++;
            dfs(i,isConnected,visited);
        }
        return count;

    }

    public void dfs(int city,int[][] isConnected,boolean[] visited){
        visited[city]=true;
        for(int i=0;i<n;i++){
            if(isConnected[i][city]==1 && !visited[i]){   //优化关键！！同时判断visited[i]是否访问过！若已经访问过则不需要进入递归！！
                isConnected[i][city]=0;
                isConnected[city][i]=0;
                visited[i]=true;
                dfs(i, isConnected, visited);
            }
            
            
            
        }
        
    }
}
